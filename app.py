import streamlit as st
from langchain.memory import ConversationBufferMemory
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.llms import Ollama

import chromadb

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
llm = Ollama(model="mistral")

# –ü–∞–º—è—Ç—å —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
prompt = PromptTemplate(
    input_variables=["chat_history", "question"],
    template="""–¢—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò. –¢—ã –∑–∞–¥–∞—ë—à—å —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—á–∞–µ—à—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∏ –¥–µ–ª–∞–µ—à—å –≤—ã–≤–æ–¥—ã.
–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π:
{chat_history}

–í–æ–ø—Ä–æ—Å: {question}
–û—Ç–≤–µ—Ç –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ:"""
)

chain = LLMChain(llm=llm, prompt=prompt, memory=memory)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
reflection_prompt = PromptTemplate(
    input_variables=["answer"],
    template="""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç:
–û—Ç–≤–µ—Ç: {answer}

–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å? –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∏—Ç–∏–∫—É –∏ —É–ª—É—á—à–µ–Ω–∏–µ:"""
)

reflection_chain = LLMChain(llm=llm, prompt=reflection_prompt)

# –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ (–¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å)
embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
vectorstore = Chroma(persist_directory="./memory/", embedding_function=embeddings)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–π
def save_insight(text):
    vectorstore.add_texts([text])


def reflect(answer):
    reflection = reflection_chain.run(answer=answer)
    return reflection


# Streamlit UI
st.title("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑ –ò–ò")

question = st.text_input("–ó–∞–¥–∞–π –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "–ö–∞–∫–∏–µ –∑–Ω–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç?")

iterations = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π", 1, 20, 5)

if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑"):
    current_question = question
    for i in range(iterations):
        with st.spinner(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i + 1}/{iterations}..."):
            answer = chain.run(question=current_question)
            reflection = reflect(answer)

            st.subheader(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {i + 1}")
            st.write(f"**üî∏ –í–æ–ø—Ä–æ—Å:** {current_question}")
            st.write(f"**üí¨ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:** {answer}")
            st.write(f"**üß† –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è:** {reflection}")

            save_insight(reflection)

            current_question = f"–ò—Å—Ö–æ–¥—è –∏–∑ –≤—ã–≤–æ–¥–æ–≤: {reflection}, –∫–∞–∫–æ–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –º–Ω–µ –∑–∞–¥–∞—Ç—å —Å–µ–±–µ?"

    st.success("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")

